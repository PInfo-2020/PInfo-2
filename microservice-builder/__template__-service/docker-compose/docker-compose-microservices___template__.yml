version: "3.5"

services:


  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

#   kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    container_name: kafka
    hostname: kafka
    networks:
      - backend-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  __template__-database:
    image: postgres:10
    container_name: __template__-database
    hostname: __template__-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: __db_username__
      POSTGRES_PASSWORD: __db_userpw__
      POSTGRES_DB: __db_name__
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "__db_username__", "-d", "__db_name__"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-__db_name__:/var/lib/postgresql/data
      #- ./test-data/__db_name__.sql:/docker-entrypoint-initdb.d/init.sql
    restart: on-failure
    stdin_open: true
    tty: true

  __template__-service:
    container_name: __template__-service
    image: unige/__template__-service:latest
    hostname: __template__-service
    networks:
      - backend-network
    ports:
      - "__port_ext__:__port__"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_AUSERDS_CONNECTION_DASH_URL: "jdbc:postgresql://__db_name__-database:5432/__db_name__"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_AUSERDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_AUSERDS_USER_DASH_NAME: '__db_username__'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_AUSERDS_PASSWORD: '__db_userpw__'
    depends_on:
       - kafka
       - __template__-database


volumes:
   pgdata-__db_name__:

networks:
  backend-network:
    driver: bridge
